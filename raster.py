import Tkinter as tk

root = tk.Tk()  # A root window for displaying objects
root.withdraw()

def rgb_to_color(*rgb):
    """Returns color string for rgb values

    rgb can be a three element tuple or 3 separate arguments
    expects r,g,b values between 0 and 255
"""
    if(len(rgb)==1):
        r,g,b = rgb[0]
    else:
        r,g,b = rgb
    return "#%02x%02x%02x" % (r,g,b)



def color_to_rgb(colorStr):
    """Returns tuple (r,g,b)"""
    return tuple(map(int, colorStr.split()));


class InvalidColorException(Exception):
    """InvalidColorException is raised a pixel is set to an invalid color
    for example with a negative r, g, or b value
    """
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

class BadPixelIndex(Exception):
    """BadPixelIndex is raised when setPixel is attempted with and x or
    y that is out of range or non-integer"
    """
    def __init__(self, x,y):
        self.value = "(" + str(x) + ", " + str(y) + ")"
    def __str__(self):
        return repr(self.value)


class Raster:
    """
    Raster provides a base class for representing, manipulating, reading,
    writing, and displaying bitmapped images.
    """
    
    def __init__(self, width, height):
        """Create blank raster with given width and height"""
        self._image = tk.PhotoImage(master=root, width = width, height = height)
        self.fill((0,0,0))
        
    def getWidth(self):
        """returns the width of the image"""
        return self._image.width()

    def getHeight(self):
        """returns the height of the image"""
        return self._image.height()

    def setPixel(self, x,y, rgb):
        """set pixel x,y to color rgb"""
        try:
            self._image.put("{" + rgb_to_color(rgb) +"}", (x, y))    
        except:
            if (((type(x) == float) or (type(y) == float)) or
                ((not 0 <= x < self.getWidth()) or (not 0 <= y < self.getHeight()))):
                raise BadPixelIndex(x,y)
            else:
                raise InvalidColorException(rgb)


    def getPixel(self,x,y): 
        """returns color of pixel x,y as rgb tuple"""
        return color_to_rgb(self._image.get(x, y))
                             
    def display(self):
        """displays image"""
        self.master = tk.Toplevel(root)
        self.master.protocol("WM_DELETE_WINDOW", self.close)
        self.master.lift()
        tk.Label(self.master, image=self._image,).pack(); # Put it in the display window
        root.mainloop()

    def close(self):
        """closes window - called by python when close box is clicked"""
        self.master.destroy()
        root.quit()

    def save_PPM(self, fileName, imageComment = ""):
        """Save the image to file filename as a ppm"""
        file = open(add_ext_if_needed(fileName, "ppm"), "w")
        file.write("P3\n");  
        file.write("# " + imageComment + "\n")
        file.write(str(self._image.width()) + " " + str(self._image.height()) + "\n")
        file.write("255\n")
        for y in range(self._image.height()):
            for x in range(self._image.width()):
                r,g,b = self.getPixel(x,y);
                file.write(str(r) + " " + str(g) + " " + str(b) + "\n")
        file.close()
    
    def fill(self, color):
    	"""Fill image with a color=(r,b,g)."""
    	r,g,b = color
    	hexcode = "#%02x%02x%02x" % (r,g,b)
    	horizontal_line = "{" + " ".join([hexcode]*self.getWidth()) + "}"
    	self._image.put(" ".join([horizontal_line]*self.getHeight()))

def add_ext_if_needed(fileName, ext):
    """helper function for read and save methods.  
    it will add an extention only if needed"""
    ls = fileName.split(".")
    if( ( len(ls)==1) or (not (ls[-1] == ext))):
        return fileName + "." + ext
    else:
        return fileName
    
#only guaranteed to will work on PPMs generated by savePPM
def read_PPM(fileName):
    """Reads ppm fileName
    note: this method will only work on images saved by save_PPM
    """
    file = open(add_ext_if_needed(fileName,"ppm"), "r")
    if(file.readline() != "P3\n"):
        raise IOError("File format does not appear to be a plain PPM")
    print file.readline() # skip comment
    dims = file.readline().split(" ")
    if(len(dims) != 2):
        raise IOError("Image should have two dimensions")
    w = int(dims[0])
    h = int(dims[1])
    maxVal = int(file.readline())
    if(maxVal != 255):
        raise IOError("Only PPMs with a max value of 255 are supported")
    img = Raster(w,h)
    print("reading image " + fileName + " :  "+ str(w)+ " x " + str(h))
    line = file.readline();
    x = 0
    y = 0
    while line:
        rgb = map(int, line.split());
        img.setPixel(x, y, rgb)
        x+=1
        if(x == w):
            x = 0
            y +=1
        line = file.readline()
    return img

